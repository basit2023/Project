# this stack is used to deploy cdk app atomatically
from aws_cdk import (
    # Duration,
                  Stack,
                  aws_iam as aws_iam_,
                  pipelines as pipelines_, 
                  
                  aws_codepipeline_actions as action_,
                  aws_codebuild as codebuild_
                  )
import aws_cdk as cdk
from constructs import Construct
from sprint_5.stepstage import StepStage
class PipelineStack(Stack):

    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)
        ##############################################################################
        #******************** Source code  *****************************
        #############################################################################
        #https://docs.aws.amazon.com/cdk/api/v1/python/aws_cdk.pipelines/CodePipeline.html
        #source code at github
        #A CDK Pipeline that uses CodePipeline to deploy CDK apps.
        source=pipelines_.CodePipelineSource.git_hub(
                        # repo_string (str): to add repository
                        "abdul22skipq/Voyager",
                        # branch(str): present the branch to repository
                        "main",
                        #authentication (Optional[SecretValue]) – A GitHub OAuth token to use for authentication.
                        authentication=cdk.SecretValue.secrets_manager("Abdulbasit-github-token"),
                        #GitHubTrigger: If and how the GitHub source action should be triggered.
                        #The first stage of the pipeline retrieves a source artifact (an AWS CloudFormation template and its
                        #configuration files) from a repository.
                        trigger=action_.GitHubTrigger('POLL') #trigger repeatedly
                        )
        
        
        ############################################################################################
        ###############################  Built Step  #############################
        ###########################################################################################
        #https://docs.aws.amazon.com/cdk/api/v1/python/aws_cdk.pipelines/ShellStep.html
        #Run shell script commands in the pipeline
        synth=pipelines_.ShellStep("Synth",
                #input (Optional[IFileSetProducer]) – FileSet to run these scripts on. The files in the FileSet 
                #will be placed in the working directory when the script is executed.
                input=source,
                #commands (Sequence[str]) – Commands to run.
                commands=[
                                "ls && cd AbdulBasit/sprint_5/", 
                                "pip install -r requirements.txt",
                                                     
                                "npm install -g aws-cdk",
                                "cdk synth"
                                                     
                        ],
                #primary_output_directory (Optional[str]) – The directory that will contain the primary output fileset.
                # In the second stage, the pipeline creates a test stack
                primary_output_directory="AbdulBasit/sprint_5/cdk.out"
                )        
        #https://docs.aws.amazon.com/cdk/api/v1/python/aws_cdk.pipelines/CodePipeline.html
        #A CDK Pipeline that uses CodePipeline to deploy CDK apps.
        Pipeline = pipelines_.CodePipeline(self, "Pipeline", 
                   #synth (IFileSetProducer) – The build step that produces the CDK Cloud Assembly. The primary output
                   #of this step needs to be the cdk.out directory generated by the cdk synth command
                   synth=synth)
        ###############################################################################################################
        #******************************  step 3   ***********************************
        ###############################################################################################################
        # instantiating the step stag for beta and for production
        beta=StepStage(self,"beta") 
        prod=StepStage(self,"Prod")    #production 
        
        #https://docs.aws.amazon.com/cdk/api/v1/python/aws_cdk.pipelines/CodeBuildStep.html
        # unit test
        #Run a script as a CodeBuild Project
        unit_test=pipelines_.CodeBuildStep("unit_test",  
                    #commands (Sequence[str]) – Commands to run.
                    commands=["ls && cd AbdulBasit/sprint_5/", 
                    "pip install -r requirements-dev.txt",
                    'python -m pytest -vv tests/'],
                    #input (Optional[IFileSetProducer]) – FileSet to run these scripts on.
                    input=source)    
                                                     
                                                     
                                                     
                                                     
                                                     
                                                     
                                                     
                                                     
       ##################################################################################################################
       ###******************** Integration test *****************************************
       ###############################################################################################################
        integraion_test=pipelines_.CodeBuildStep("integration_test",  commands=["ls && cd AbdulBasit/sprint_5/", #directory
                                                "pip install -r requirements.txt",
                                                'python3 Integration_test/Integration_test_api.py'], input=source)                #this is the integration test
           
           
                                                
       ##################################################################################################################
       ###******************** Docker test *****************************************
       ###############################################################################################################                                               
                                                
                                                

        #Docker Tests;
       
        #https://docs.aws.amazon.com/cdk/api/v1/python/aws_cdk.pipelines/CodeBuildStep.html
        #Run a script as a CodeBuild Project.
        pyresttest=pipelines_.CodeBuildStep("BasitpyrestDocker", 
                   commands=[], 
                   #build_environment (Optional[BuildEnvironment]) – Changes to environment. This environment will be 
                   #combined with the pipeline’s default environment.
                   #https://docs.aws.amazon.com/cdk/api/v1/python/aws_cdk.aws_codebuild/BuildEnvironment.html#aws_cdk.aws_codebuild.BuildEnvironment
                    build_environment =codebuild_.BuildEnvironment(
                            #build_image (Optional[IBuildImage]) – The image used for the builds.
                            build_image=codebuild_.LinuxBuildImage.from_asset(self,'Image',directory='./pyrest').from_docker_registry(name="docker:dind"), #specifing our environment#
                                       privileged=True),
                    #partial_build_spec (Optional[BuildSpec]) – Additional configuration that can only be configured via BuildSpec.                
                    #https://docs.aws.amazon.com/cdk/api/v1/python/aws_cdk.aws_codebuild/BuildSpec.html
                    #BuildSpec for CodeBuild projects.
                    partial_build_spec=codebuild_.BuildSpec.from_object(
                                        {
                                        #https://docs.aws.amazon.com/codebuild/latest/userguide/sample-docker-custom-image.html
                                          "version": 0.2,
                                            "phases":{
                                              "install":{
                                                  #this command will run the docker
                                                "commands":[
                                                  "nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 &",
                                                  "timeout 15 sh -c \"until docker info; do echo .; sleep 1; done\""
                                              
                                                         ]
                                                    },
                                              
                                            "pre_build":{
                                             "commands":[
                                                         "ls && cd AbdulBasit/sprint_5/pyrest",
                                                         "docker build -t api-test-basit ." #image build
                                                         ]
                                                         },
                                             "build":{
                                               "commands":[                     
                                                      "docker run api-test-basit  https://qb0ky2off3.execute-api.us-east-2.amazonaws.com/prod api_test.yml"            #run command with link and test name
                                                         ]
                                                     }
                                                 }
                                            }
                                                 
                                      )
                                     )
        #https://docs.aws.amazon.com/cdk/api/v1/python/aws_cdk.pipelines/CodePipeline.html
        #Add a Stage to the pipeline, to be deployed in sequence with other Stages added to the pipeline. All Stacks in 
        #the stage will be deployed in an order automatically determined by their relative dependencies.
        Pipeline.add_stage(beta, 
                #pre (Optional[Sequence[Step]]) – Additional steps to run before any of the stacks in the stage.
                pre=[unit_test], 
                #post (Optional[Sequence[Step]]) – Additional steps to run after all of the stacks in the stage.
                post=[pyresttest,integraion_test])      #pre is unit test and post is integration test
                              
                              
                              
                              
                              
                              
                              
                              
                              
                              
        ##########################################################################################
        #********************* Production Stage ***************************
        #########################################################################################
        """
        #the Pipeline will be paused waiting for a human to resume it
        In the third stage, the pipeline creates a change set against a production stack, and then waits for your approval.
 
        In initial run, it won't have a production stack. The change set shows all of the resources 
        that AWS CloudFormation will create. If you approve, this stage executes the change set and builds your production stack.
        """
        Pipeline.add_stage(prod,pre=[pipelines_.ManualApprovalStep("PromoteToProd")])  
        
