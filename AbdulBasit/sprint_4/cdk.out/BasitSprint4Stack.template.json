{
  "Resources": {
    "Role1ABCC5F0": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Description": "showing logs on cloudwhatch",
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/CloudWatchFullAccess"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonS3FullAccess"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonDynamoDBFullAccess"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/Role/Resource"
      }
    },
    "RoleDefaultPolicy5FFB7DAB": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "dynamodb:*",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "abdulbasittableBDBA8259",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "RoleDefaultPolicy5FFB7DAB",
        "Roles": [
          {
            "Ref": "Role1ABCC5F0"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/Role/DefaultPolicy/Resource"
      }
    },
    "basitWebHealthLambdaA5E06DCF": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "b60ab31de059076cd5d44590ee575b24e8bd3e70bf67584cf70372cae3ea6d06.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "Role1ABCC5F0",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "sns_topic_arn": {
              "Ref": "AlarmAlert8BAEBE0F"
            },
            "table_name": {
              "Ref": "abdulbasittableBDBA8259"
            }
          }
        },
        "Handler": "WebHealthLambda.lambda_handler",
        "Runtime": "python3.6",
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ],
        "Timeout": 30
      },
      "DependsOn": [
        "RoleDefaultPolicy5FFB7DAB",
        "Role1ABCC5F0"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/basit_WebHealthLambda/Resource",
        "aws:asset:path": "asset.b60ab31de059076cd5d44590ee575b24e8bd3e70bf67584cf70372cae3ea6d06",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "basitWebHealthLambdaCurrentVersionD43B81384631a7b4df31ae6ec432781843097451": {
      "Type": "AWS::Lambda::Version",
      "Properties": {
        "FunctionName": {
          "Ref": "basitWebHealthLambdaA5E06DCF"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/basit_WebHealthLambda/CurrentVersion/Resource"
      }
    },
    "abdulbasitbucketC88E14C3": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "abdulbasitbucket",
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true"
          },
          {
            "Key": "aws-cdk:cr-owned:9f8d6e47",
            "Value": "true"
          },
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/abdulbasitbucket/Resource"
      }
    },
    "abdulbasitbucketPolicyB2E3CC42": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "abdulbasitbucketC88E14C3"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "abdulbasitbucketC88E14C3",
                        "Arn"
                      ]
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn"
                  ]
                }
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "abdulbasitbucketC88E14C3",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "abdulbasitbucketC88E14C3",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/abdulbasitbucket/Policy/Resource"
      }
    },
    "abdulbasitbucketAutoDeleteObjectsCustomResourceBB20B278": {
      "Type": "Custom::S3AutoDeleteObjects",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "abdulbasitbucketC88E14C3"
        }
      },
      "DependsOn": [
        "abdulbasitbucketPolicyB2E3CC42"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/abdulbasitbucket/AutoDeleteObjectsCustomResource/Default"
      }
    },
    "abdulbasitbucketNotifications375847DF": {
      "Type": "Custom::S3BucketNotifications",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "abdulbasitbucketC88E14C3"
        },
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "Filter": {
                "Key": {
                  "FilterRules": [
                    {
                      "Name": "suffix",
                      "Value": ".json"
                    }
                  ]
                }
              },
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "TableDynamoDBLambda288091FA",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Managed": true
      },
      "DependsOn": [
        "abdulbasitbucketAllowBucketNotificationsToBasitSprint4StackTableDynamoDBLambda18D1831492FFE8C6"
      ],
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/abdulbasitbucket/Notifications/Resource"
      }
    },
    "abdulbasitbucketAllowBucketNotificationsToBasitSprint4StackTableDynamoDBLambda18D1831492FFE8C6": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "TableDynamoDBLambda288091FA",
            "Arn"
          ]
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "abdulbasitbucketC88E14C3",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/abdulbasitbucket/AllowBucketNotificationsToBasitSprint4StackTableDynamoDBLambda18D18314"
      }
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
      }
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "bdb08b9984816ecf43301a0c6d8913e270ee2448940b6b95e430dd222a4d90be.zip"
        },
        "Timeout": 900,
        "MemorySize": 128,
        "Handler": "__entrypoint__.handler",
        "Role": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Description": {
          "Fn::Join": [
            "",
            [
              "Lambda function for auto-deleting objects in ",
              {
                "Ref": "abdulbasitbucketC88E14C3"
              },
              " S3 bucket."
            ]
          ]
        }
      },
      "DependsOn": [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
      ],
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
        "aws:asset:path": "asset.bdb08b9984816ecf43301a0c6d8913e270ee2448940b6b95e430dd222a4d90be",
        "aws:asset:property": "Code"
      }
    },
    "lambdaroledb8F96FA37": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonDynamoDBFullAccess"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonSNSFullAccess"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonS3FullAccess"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/lambda-role-db/Resource"
      }
    },
    "lambdaroledbDefaultPolicyAF35499B": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "dynamodb:*",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "abdulbasittableBDBA8259",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "lambdaroledbDefaultPolicyAF35499B",
        "Roles": [
          {
            "Ref": "lambdaroledb8F96FA37"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/lambda-role-db/DefaultPolicy/Resource"
      }
    },
    "TableDynamoDBLambda288091FA": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "b60ab31de059076cd5d44590ee575b24e8bd3e70bf67584cf70372cae3ea6d06.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "lambdaroledb8F96FA37",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "table_name": {
              "Ref": "abdulbasittableBDBA8259"
            }
          }
        },
        "Handler": "lambda_Db_tabal.lambda_handler",
        "Runtime": "python3.6",
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ],
        "Timeout": 30
      },
      "DependsOn": [
        "lambdaroledbDefaultPolicyAF35499B",
        "lambdaroledb8F96FA37"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/Table_DynamoDB_Lambda/Resource",
        "aws:asset:path": "asset.b60ab31de059076cd5d44590ee575b24e8bd3e70bf67584cf70372cae3ea6d06",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "abdulbasittableBDBA8259": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "link",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "link",
            "AttributeType": "S"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/abdulbasittable/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
        "Code": {
          "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n    response_status = \"SUCCESS\"\n    error_message = \"\"\n    try:\n        props = event[\"ResourceProperties\"]\n        bucket = props[\"BucketName\"]\n        notification_configuration = props[\"NotificationConfiguration\"]\n        request_type = event[\"RequestType\"]\n        managed = props.get('Managed', 'true').lower() == 'true'\n        stack_id = event['StackId']\n\n        if managed:\n          config = handle_managed(request_type, notification_configuration)\n        else:\n          config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n        put_bucket_notification_configuration(bucket, config)\n    except Exception as e:\n        logging.exception(\"Failed to put bucket notification configuration\")\n        response_status = \"FAILED\"\n        error_message = f\"Error: {str(e)}. \"\n    finally:\n        submit_response(event, context, response_status, error_message)\n\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n\n  # find external notifications\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  # if delete, that's all we need\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  # otherwise, merge external with incoming config and augment with id\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n  return notifications\n\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    # if the notification was created by us, we know what id to expect\n    # so we can filter by it.\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  return external_notifications\n\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n    response_body = json.dumps(\n        {\n            \"Status\": response_status,\n            \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n            \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n            \"StackId\": event[\"StackId\"],\n            \"RequestId\": event[\"RequestId\"],\n            \"LogicalResourceId\": event[\"LogicalResourceId\"],\n            \"NoEcho\": False,\n        }\n    ).encode(\"utf-8\")\n    headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n    try:\n        req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n        with urllib.request.urlopen(req) as response:\n            print(response.read().decode(\"utf-8\"))\n        print(\"Status code: \" + response.reason)\n    except Exception as e:\n        print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 300,
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
      ],
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
      }
    },
    "s3resourceAwsCliLayerF12E0A84": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "dc4f68f05c4deb9ab720f82f124754acb41ac68a8a136519738df7c22ab316f6.zip"
        },
        "Description": "/opt/awscli/aws"
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/s3_resource/AwsCliLayer/Resource",
        "aws:asset:path": "asset.dc4f68f05c4deb9ab720f82f124754acb41ac68a8a136519738df7c22ab316f6.zip",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Content"
      }
    },
    "s3resourceCustomResource4AA3A5BF": {
      "Type": "Custom::CDKBucketDeployment",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
            "Arn"
          ]
        },
        "SourceBucketNames": [
          {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          }
        ],
        "SourceObjectKeys": [
          "adb84b5ca5d695fc560eb0840706941e1734a52078a6d323ee2496d906c872fc.zip"
        ],
        "DestinationBucketName": {
          "Ref": "abdulbasitbucketC88E14C3"
        },
        "Prune": true
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/s3_resource/CustomResource/Default"
      }
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/Resource"
      }
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "abdulbasitbucketC88E14C3",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "abdulbasitbucketC88E14C3",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "Roles": [
          {
            "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "4e09e63403b235ffda9db09367996f2d4c9fe1f7aa19b402908d8221614a282e.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
            "Arn"
          ]
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "s3resourceAwsCliLayerF12E0A84"
          }
        ],
        "Runtime": "python3.7",
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ],
        "Timeout": 900
      },
      "DependsOn": [
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
      ],
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Resource",
        "aws:asset:path": "asset.4e09e63403b235ffda9db09367996f2d4c9fe1f7aa19b402908d8221614a282e",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "basitAPILambda4034675C": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "b60ab31de059076cd5d44590ee575b24e8bd3e70bf67584cf70372cae3ea6d06.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "lambdaroledb8F96FA37",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "table_name": {
              "Ref": "abdulbasittableBDBA8259"
            }
          }
        },
        "Handler": "API_lambda.lambda_handler",
        "Runtime": "python3.6",
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ],
        "Timeout": 30
      },
      "DependsOn": [
        "lambdaroledbDefaultPolicyAF35499B",
        "lambdaroledb8F96FA37"
      ],
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/basit_APILambda/Resource",
        "aws:asset:path": "asset.b60ab31de059076cd5d44590ee575b24e8bd3e70bf67584cf70372cae3ea6d06",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "basitAPILambdaInvokeServicePrincipalapigatewayamazonawscomE25FF044": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "basitAPILambda4034675C",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com"
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/basit_APILambda/InvokeServicePrincipal(apigateway.amazonaws.com)"
      }
    },
    "AbdulBasitAPI06A94A6B": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "AbdulBasitAPI",
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Resource"
      }
    },
    "AbdulBasitAPICloudWatchRoleE0FC7E43": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/CloudWatchRole/Resource"
      }
    },
    "AbdulBasitAPIAccount3766DB39": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "AbdulBasitAPICloudWatchRoleE0FC7E43",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AbdulBasitAPI06A94A6B"
      ],
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Account"
      }
    },
    "AbdulBasitAPIDeployment11C57E8B873af85f11a62a12198ecb468f56c252": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "AbdulBasitAPI06A94A6B"
        },
        "Description": "Automatically created by the RestApi construct"
      },
      "DependsOn": [
        "AbdulBasitAPIproxyANY933F6FA2",
        "AbdulBasitAPIproxy7EBC519E",
        "AbdulBasitAPIANY0730FAF1",
        "AbdulBasitAPIitemsDELETE2CCE55E9",
        "AbdulBasitAPIitemsGET208348D3",
        "AbdulBasitAPIitemsPOSTF3B70884",
        "AbdulBasitAPIitemsPUT59416750",
        "AbdulBasitAPIitemsA37A8030"
      ],
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Deployment/Resource"
      }
    },
    "AbdulBasitAPIDeploymentStageprod4C8979E7": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "RestApiId": {
          "Ref": "AbdulBasitAPI06A94A6B"
        },
        "DeploymentId": {
          "Ref": "AbdulBasitAPIDeployment11C57E8B873af85f11a62a12198ecb468f56c252"
        },
        "StageName": "prod",
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "DependsOn": [
        "AbdulBasitAPIAccount3766DB39"
      ],
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/DeploymentStage.prod/Resource"
      }
    },
    "AbdulBasitAPIproxy7EBC519E": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "AbdulBasitAPI06A94A6B",
            "RootResourceId"
          ]
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "AbdulBasitAPI06A94A6B"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/{proxy+}/Resource"
      }
    },
    "AbdulBasitAPIproxyANYApiPermissionBasitSprint4StackAbdulBasitAPI7506CC6AANYproxy82EB8E92": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "basitAPILambda4034675C",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "AbdulBasitAPI06A94A6B"
              },
              "/",
              {
                "Ref": "AbdulBasitAPIDeploymentStageprod4C8979E7"
              },
              "/*/*"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/{proxy+}/ANY/ApiPermission.BasitSprint4StackAbdulBasitAPI7506CC6A.ANY..{proxy+}"
      }
    },
    "AbdulBasitAPIproxyANYApiPermissionTestBasitSprint4StackAbdulBasitAPI7506CC6AANYproxyE6B3F861": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "basitAPILambda4034675C",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "AbdulBasitAPI06A94A6B"
              },
              "/test-invoke-stage/*/*"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/{proxy+}/ANY/ApiPermission.Test.BasitSprint4StackAbdulBasitAPI7506CC6A.ANY..{proxy+}"
      }
    },
    "AbdulBasitAPIproxyANY933F6FA2": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "ResourceId": {
          "Ref": "AbdulBasitAPIproxy7EBC519E"
        },
        "RestApiId": {
          "Ref": "AbdulBasitAPI06A94A6B"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "basitAPILambda4034675C",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/{proxy+}/ANY/Resource"
      }
    },
    "AbdulBasitAPIANYApiPermissionBasitSprint4StackAbdulBasitAPI7506CC6AANYDC04D681": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "basitAPILambda4034675C",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "AbdulBasitAPI06A94A6B"
              },
              "/",
              {
                "Ref": "AbdulBasitAPIDeploymentStageprod4C8979E7"
              },
              "/*/"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/ANY/ApiPermission.BasitSprint4StackAbdulBasitAPI7506CC6A.ANY.."
      }
    },
    "AbdulBasitAPIANYApiPermissionTestBasitSprint4StackAbdulBasitAPI7506CC6AANYFD810DE7": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "basitAPILambda4034675C",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "AbdulBasitAPI06A94A6B"
              },
              "/test-invoke-stage/*/"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/ANY/ApiPermission.Test.BasitSprint4StackAbdulBasitAPI7506CC6A.ANY.."
      }
    },
    "AbdulBasitAPIANY0730FAF1": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "ResourceId": {
          "Fn::GetAtt": [
            "AbdulBasitAPI06A94A6B",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "AbdulBasitAPI06A94A6B"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "basitAPILambda4034675C",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/ANY/Resource"
      }
    },
    "AbdulBasitAPIitemsA37A8030": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "AbdulBasitAPI06A94A6B",
            "RootResourceId"
          ]
        },
        "PathPart": "items",
        "RestApiId": {
          "Ref": "AbdulBasitAPI06A94A6B"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/items/Resource"
      }
    },
    "AbdulBasitAPIitemsGETApiPermissionBasitSprint4StackAbdulBasitAPI7506CC6AGETitems64420A14": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "basitAPILambda4034675C",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "AbdulBasitAPI06A94A6B"
              },
              "/",
              {
                "Ref": "AbdulBasitAPIDeploymentStageprod4C8979E7"
              },
              "/GET/items"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/items/GET/ApiPermission.BasitSprint4StackAbdulBasitAPI7506CC6A.GET..items"
      }
    },
    "AbdulBasitAPIitemsGETApiPermissionTestBasitSprint4StackAbdulBasitAPI7506CC6AGETitemsA3597025": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "basitAPILambda4034675C",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "AbdulBasitAPI06A94A6B"
              },
              "/test-invoke-stage/GET/items"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/items/GET/ApiPermission.Test.BasitSprint4StackAbdulBasitAPI7506CC6A.GET..items"
      }
    },
    "AbdulBasitAPIitemsGET208348D3": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "ResourceId": {
          "Ref": "AbdulBasitAPIitemsA37A8030"
        },
        "RestApiId": {
          "Ref": "AbdulBasitAPI06A94A6B"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "basitAPILambda4034675C",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/items/GET/Resource"
      }
    },
    "AbdulBasitAPIitemsPUTApiPermissionBasitSprint4StackAbdulBasitAPI7506CC6APUTitemsF6C7ABDA": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "basitAPILambda4034675C",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "AbdulBasitAPI06A94A6B"
              },
              "/",
              {
                "Ref": "AbdulBasitAPIDeploymentStageprod4C8979E7"
              },
              "/PUT/items"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/items/PUT/ApiPermission.BasitSprint4StackAbdulBasitAPI7506CC6A.PUT..items"
      }
    },
    "AbdulBasitAPIitemsPUTApiPermissionTestBasitSprint4StackAbdulBasitAPI7506CC6APUTitemsDD1994BD": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "basitAPILambda4034675C",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "AbdulBasitAPI06A94A6B"
              },
              "/test-invoke-stage/PUT/items"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/items/PUT/ApiPermission.Test.BasitSprint4StackAbdulBasitAPI7506CC6A.PUT..items"
      }
    },
    "AbdulBasitAPIitemsPUT59416750": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "ResourceId": {
          "Ref": "AbdulBasitAPIitemsA37A8030"
        },
        "RestApiId": {
          "Ref": "AbdulBasitAPI06A94A6B"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "basitAPILambda4034675C",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/items/PUT/Resource"
      }
    },
    "AbdulBasitAPIitemsDELETEApiPermissionBasitSprint4StackAbdulBasitAPI7506CC6ADELETEitems4B18DDA7": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "basitAPILambda4034675C",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "AbdulBasitAPI06A94A6B"
              },
              "/",
              {
                "Ref": "AbdulBasitAPIDeploymentStageprod4C8979E7"
              },
              "/DELETE/items"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/items/DELETE/ApiPermission.BasitSprint4StackAbdulBasitAPI7506CC6A.DELETE..items"
      }
    },
    "AbdulBasitAPIitemsDELETEApiPermissionTestBasitSprint4StackAbdulBasitAPI7506CC6ADELETEitems040A2E62": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "basitAPILambda4034675C",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "AbdulBasitAPI06A94A6B"
              },
              "/test-invoke-stage/DELETE/items"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/items/DELETE/ApiPermission.Test.BasitSprint4StackAbdulBasitAPI7506CC6A.DELETE..items"
      }
    },
    "AbdulBasitAPIitemsDELETE2CCE55E9": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "ResourceId": {
          "Ref": "AbdulBasitAPIitemsA37A8030"
        },
        "RestApiId": {
          "Ref": "AbdulBasitAPI06A94A6B"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "basitAPILambda4034675C",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/items/DELETE/Resource"
      }
    },
    "AbdulBasitAPIitemsPOSTApiPermissionBasitSprint4StackAbdulBasitAPI7506CC6APOSTitemsFEF5D5E7": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "basitAPILambda4034675C",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "AbdulBasitAPI06A94A6B"
              },
              "/",
              {
                "Ref": "AbdulBasitAPIDeploymentStageprod4C8979E7"
              },
              "/POST/items"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/items/POST/ApiPermission.BasitSprint4StackAbdulBasitAPI7506CC6A.POST..items"
      }
    },
    "AbdulBasitAPIitemsPOSTApiPermissionTestBasitSprint4StackAbdulBasitAPI7506CC6APOSTitems74D9B0AC": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "basitAPILambda4034675C",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "AbdulBasitAPI06A94A6B"
              },
              "/test-invoke-stage/POST/items"
            ]
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/items/POST/ApiPermission.Test.BasitSprint4StackAbdulBasitAPI7506CC6A.POST..items"
      }
    },
    "AbdulBasitAPIitemsPOSTF3B70884": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "ResourceId": {
          "Ref": "AbdulBasitAPIitemsA37A8030"
        },
        "RestApiId": {
          "Ref": "AbdulBasitAPI06A94A6B"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "basitAPILambda4034675C",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitAPI/Default/items/POST/Resource"
      }
    },
    "Lambdafunctioninvocation10355D8D": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "periodic lambda",
        "ScheduleExpression": "rate(1 minute)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "basitWebHealthLambdaA5E06DCF",
                "Arn"
              ]
            },
            "Id": "Target0"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/Lambda_function_invocation/Resource"
      }
    },
    "LambdafunctioninvocationAllowEventRuleBasitSprint4StackbasitWebHealthLambda8B0809AFA086778B": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "basitWebHealthLambdaA5E06DCF",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "Lambdafunctioninvocation10355D8D",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/Lambda_function_invocation/AllowEventRuleBasitSprint4StackbasitWebHealthLambda8B0809AF"
      }
    },
    "AlarmAlert8BAEBE0F": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/Alarm Alert!/Resource"
      }
    },
    "AlarmAlertabdulbasitskipqgmailcom67ECA517": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "email",
        "TopicArn": {
          "Ref": "AlarmAlert8BAEBE0F"
        },
        "Endpoint": "abdul.basit.skipq@gmail.com"
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/Alarm Alert!/abdul.basit.skipq@gmail.com/Resource"
      }
    },
    "wwwskipqorgURLAvalibality6790E8E7": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": 1,
        "AlarmActions": [
          {
            "Ref": "AlarmAlert8BAEBE0F"
          }
        ],
        "Dimensions": [
          {
            "Name": "basit-url",
            "Value": "www.skipq.org"
          }
        ],
        "MetricName": "URL_Avalibality",
        "Namespace": "AbdulBasit_webheathlambdametrics",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1,
        "TreatMissingData": "breaching"
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/www.skipq.org URL_Avalibality/Resource"
      }
    },
    "wwwskipqorgURLlatencyEA33BCC9": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": 1,
        "AlarmActions": [
          {
            "Ref": "AlarmAlert8BAEBE0F"
          }
        ],
        "Dimensions": [
          {
            "Name": "basit-url",
            "Value": "www.skipq.org"
          }
        ],
        "MetricName": "URL_latency",
        "Namespace": "AbdulBasit_webheathlambdametrics",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 0.25,
        "TreatMissingData": "breaching"
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/www.skipq.org URL_latency/Resource"
      }
    },
    "wwwfiverrcomURLAvalibalityECDE41A4": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": 1,
        "AlarmActions": [
          {
            "Ref": "AlarmAlert8BAEBE0F"
          }
        ],
        "Dimensions": [
          {
            "Name": "basit-url",
            "Value": "www.fiverr.com"
          }
        ],
        "MetricName": "URL_Avalibality",
        "Namespace": "AbdulBasit_webheathlambdametrics",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 1,
        "TreatMissingData": "breaching"
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/www.fiverr.com URL_Avalibality/Resource"
      }
    },
    "wwwfiverrcomURLlatency64347A79": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": 1,
        "AlarmActions": [
          {
            "Ref": "AlarmAlert8BAEBE0F"
          }
        ],
        "Dimensions": [
          {
            "Name": "basit-url",
            "Value": "www.fiverr.com"
          }
        ],
        "MetricName": "URL_latency",
        "Namespace": "AbdulBasit_webheathlambdametrics",
        "Period": 60,
        "Statistic": "Average",
        "Threshold": 0.25,
        "TreatMissingData": "breaching"
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/www.fiverr.com URL_latency/Resource"
      }
    },
    "RoleAmazonDynamoDBFullAccess506A33E3": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Description": "Lambda Role forAmazonDynamoDBFullAccess",
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/AmazonDynamoDBFullAccess"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/Role_AmazonDynamoDBFullAccess/Resource"
      }
    },
    "RoleAmazonDynamoDBFullAccessDefaultPolicy6C34340C": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Mytableforalarmlogs62E34F60",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "RoleAmazonDynamoDBFullAccessDefaultPolicy6C34340C",
        "Roles": [
          {
            "Ref": "RoleAmazonDynamoDBFullAccess506A33E3"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/Role_AmazonDynamoDBFullAccess/DefaultPolicy/Resource"
      }
    },
    "AbdulBasitDynamoDBLambdaD34C62D3": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "b60ab31de059076cd5d44590ee575b24e8bd3e70bf67584cf70372cae3ea6d06.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "RoleAmazonDynamoDBFullAccess506A33E3",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "table_name": {
              "Ref": "Mytableforalarmlogs62E34F60"
            }
          }
        },
        "Handler": "db_lambda.lambda_handler",
        "Runtime": "python3.6",
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ],
        "Timeout": 30
      },
      "DependsOn": [
        "RoleAmazonDynamoDBFullAccessDefaultPolicy6C34340C",
        "RoleAmazonDynamoDBFullAccess506A33E3"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitDynamoDBLambda/Resource",
        "aws:asset:path": "asset.b60ab31de059076cd5d44590ee575b24e8bd3e70bf67584cf70372cae3ea6d06",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "AbdulBasitDynamoDBLambdaAllowInvokeBasitSprint4StackAlarmAlert169A29119AF4DAEF": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AbdulBasitDynamoDBLambdaD34C62D3",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "AlarmAlert8BAEBE0F"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitDynamoDBLambda/AllowInvoke:BasitSprint4StackAlarmAlert169A2911"
      }
    },
    "AbdulBasitDynamoDBLambdaAlarmAlertD3A58C9E": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "AlarmAlert8BAEBE0F"
        },
        "Endpoint": {
          "Fn::GetAtt": [
            "AbdulBasitDynamoDBLambdaD34C62D3",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitDynamoDBLambda/Alarm Alert!/Resource"
      }
    },
    "AbdulBasitDynamoDBLambdaCurrentVersion19CDC71816b8e17988a903e5611194406431e6a1": {
      "Type": "AWS::Lambda::Version",
      "Properties": {
        "FunctionName": {
          "Ref": "AbdulBasitDynamoDBLambdaD34C62D3"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/AbdulBasitDynamoDBLambda/CurrentVersion/Resource"
      }
    },
    "Mytableforalarmlogs62E34F60": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "key",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "key",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/My_table_for_alarm_logs/Resource"
      }
    },
    "alarmforfaliuremetric13F5E2D7C": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": 1,
        "AlarmActions": [
          {
            "Ref": "AlarmAlert8BAEBE0F"
          }
        ],
        "Dimensions": [
          {
            "Name": "FunctioName",
            "Value": {
              "Ref": "AbdulBasitDynamoDBLambdaD34C62D3"
            }
          }
        ],
        "MetricName": "Duration",
        "Namespace": "AWS/Lambda",
        "Period": 300,
        "Statistic": "Average",
        "Threshold": 1
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/alarm_for_faliure_metric_1/Resource"
      }
    },
    "alarmforfaliuremetric2E9027A2A": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": 1,
        "AlarmActions": [
          {
            "Ref": "AlarmAlert8BAEBE0F"
          }
        ],
        "Dimensions": [
          {
            "Name": "FunctioName",
            "Value": {
              "Ref": "AbdulBasitDynamoDBLambdaD34C62D3"
            }
          }
        ],
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 300,
        "Statistic": "Average",
        "Threshold": 1
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/alarm_for_faliure_metric_2/Resource"
      }
    },
    "LambdaAliasC91EBB8D": {
      "Type": "AWS::Lambda::Alias",
      "Properties": {
        "FunctionName": {
          "Ref": "AbdulBasitDynamoDBLambdaD34C62D3"
        },
        "FunctionVersion": {
          "Fn::GetAtt": [
            "AbdulBasitDynamoDBLambdaCurrentVersion19CDC71816b8e17988a903e5611194406431e6a1",
            "Version"
          ]
        },
        "Name": "current"
      },
      "UpdatePolicy": {
        "CodeDeployLambdaAliasUpdate": {
          "ApplicationName": {
            "Ref": "WebHealthDeploymentApplication84B48A30"
          },
          "DeploymentGroupName": {
            "Ref": "WebHealthDeployment25900ABC"
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/Lambda_Alias/Resource"
      }
    },
    "WebHealthDeploymentApplication84B48A30": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ComputePlatform": "Lambda",
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/WebHealthDeployment/Application/Resource"
      }
    },
    "WebHealthDeploymentServiceRole283B6D79": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "codedeploy.",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".",
                      {
                        "Ref": "AWS::URLSuffix"
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSCodeDeployRoleForLambdaLimited"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/WebHealthDeployment/ServiceRole/Resource"
      }
    },
    "WebHealthDeployment25900ABC": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": {
          "Ref": "WebHealthDeploymentApplication84B48A30"
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "WebHealthDeploymentServiceRole283B6D79",
            "Arn"
          ]
        },
        "AlarmConfiguration": {
          "Alarms": [
            {
              "Name": {
                "Ref": "alarmforfaliuremetric13F5E2D7C"
              }
            },
            {
              "Name": {
                "Ref": "alarmforfaliuremetric2E9027A2A"
              }
            }
          ],
          "Enabled": true
        },
        "AutoRollbackConfiguration": {
          "Enabled": true,
          "Events": [
            "DEPLOYMENT_FAILURE",
            "DEPLOYMENT_STOP_ON_ALARM"
          ]
        },
        "DeploymentConfigName": "CodeDeployDefault.LambdaLinear10PercentEvery1Minute",
        "DeploymentStyle": {
          "DeploymentOption": "WITH_TRAFFIC_CONTROL",
          "DeploymentType": "BLUE_GREEN"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/WebHealthDeployment/Resource"
      }
    },
    "alarmforfaliuremetric1wh6D1EAA34": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": 1,
        "AlarmActions": [
          {
            "Ref": "AlarmAlert8BAEBE0F"
          }
        ],
        "Dimensions": [
          {
            "Name": "FunctioName",
            "Value": {
              "Ref": "basitWebHealthLambdaA5E06DCF"
            }
          }
        ],
        "MetricName": "Duration",
        "Namespace": "AWS/Lambda",
        "Period": 300,
        "Statistic": "Average",
        "Threshold": 4000
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/alarm_for_faliure_metric_1_wh/Resource"
      }
    },
    "alarmforfaliuremetric2wh50163101": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": 1,
        "AlarmActions": [
          {
            "Ref": "AlarmAlert8BAEBE0F"
          }
        ],
        "Dimensions": [
          {
            "Name": "FunctioName",
            "Value": {
              "Ref": "basitWebHealthLambdaA5E06DCF"
            }
          }
        ],
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 300,
        "Statistic": "Average",
        "Threshold": 3500
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/alarm_for_faliure_metric_2_wh/Resource"
      }
    },
    "LambdaAliaswh83C43830": {
      "Type": "AWS::Lambda::Alias",
      "Properties": {
        "FunctionName": {
          "Ref": "basitWebHealthLambdaA5E06DCF"
        },
        "FunctionVersion": {
          "Fn::GetAtt": [
            "basitWebHealthLambdaCurrentVersionD43B81384631a7b4df31ae6ec432781843097451",
            "Version"
          ]
        },
        "Name": "current"
      },
      "UpdatePolicy": {
        "CodeDeployLambdaAliasUpdate": {
          "ApplicationName": {
            "Ref": "WebHealthDeploymentwhApplicationC46537AE"
          },
          "DeploymentGroupName": {
            "Ref": "WebHealthDeploymentwh9CCE2182"
          }
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/Lambda_Alias_wh/Resource"
      }
    },
    "WebHealthDeploymentwhApplicationC46537AE": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ComputePlatform": "Lambda",
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/WebHealthDeployment_wh/Application/Resource"
      }
    },
    "WebHealthDeploymentwhServiceRole16D07AC1": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "codedeploy.",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".",
                      {
                        "Ref": "AWS::URLSuffix"
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSCodeDeployRoleForLambdaLimited"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "cohort",
            "Value": "Voyager"
          },
          {
            "Key": "name",
            "Value": "Abdul Basit"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/WebHealthDeployment_wh/ServiceRole/Resource"
      }
    },
    "WebHealthDeploymentwh9CCE2182": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": {
          "Ref": "WebHealthDeploymentwhApplicationC46537AE"
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "WebHealthDeploymentwhServiceRole16D07AC1",
            "Arn"
          ]
        },
        "AlarmConfiguration": {
          "Alarms": [
            {
              "Name": {
                "Ref": "alarmforfaliuremetric1wh6D1EAA34"
              }
            },
            {
              "Name": {
                "Ref": "alarmforfaliuremetric2wh50163101"
              }
            }
          ],
          "Enabled": true
        },
        "AutoRollbackConfiguration": {
          "Enabled": true,
          "Events": [
            "DEPLOYMENT_FAILURE",
            "DEPLOYMENT_STOP_ON_ALARM"
          ]
        },
        "DeploymentConfigName": "CodeDeployDefault.LambdaLinear10PercentEvery1Minute",
        "DeploymentStyle": {
          "DeploymentOption": "WITH_TRAFFIC_CONTROL",
          "DeploymentType": "BLUE_GREEN"
        }
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/WebHealthDeployment_wh/Resource"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAA/21Sy04rMQz9FvZpuBckJJZDEWxAVC1iW7mJKaaZJMqDMhrNv988ZjoF3ZWPjxMnPsdX/O8V/3MBR78Q8rBQtOP9JoA4sERte4KW92ujkC3fdYkro0h0Oa1oYAranQTeP0QtAhmdayf8hs6P3BlcoWvJT9kTdOim6ob0XmEwc4tGEfh8roCB+ettD95j8LzJgUm0ynQt6sDvojhguD8R+TTvK3sHHlmFuduIapinOs8HJjsNrZFJlFfYVRUKGBhY2kPAI3S8fyoKrNGHxlJRaoaNECbqwOY/ZfYsS2rvS+MK0lUTncDy25Uz393EjI0rfsbwYWSmRjRVBoZfqa1PtsXRtpj/63WiXo0lUYYoYBN3Xjiyk2vn+cCEMlEeIYgP3jcKXFs9SCDVjMQq+zT9PNGjM9GyyjbWJiFheuBX+uvOMLBiaBYibQFbRh9M+9/xf5aSTF8k0Z1EGHdyq/JmbdMmC0W8OfqlorJsuddLDDYWM5ZGS6ozr7okpr685jf89uLTEy1cMo9a5Osa/wGSrNB9MAMAAA=="
      },
      "Metadata": {
        "aws:cdk:path": "BasitSprint4Stack/CDKMetadata/Default"
      },
      "Condition": "CDKMetadataAvailable"
    }
  },
  "Outputs": {
    "AbdulBasitAPIEndpoint78A681A6": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "AbdulBasitAPI06A94A6B"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/",
            {
              "Ref": "AbdulBasitAPIDeploymentStageprod4C8979E7"
            },
            "/"
          ]
        ]
      }
    }
  },
  "Conditions": {
    "CDKMetadataAvailable": {
      "Fn::Or": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "af-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ca-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-northwest-1"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "me-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "sa-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-2"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-2"
              ]
            }
          ]
        }
      ]
    }
  },
  "Parameters": {
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  }
}